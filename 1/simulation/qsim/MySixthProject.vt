// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/27/2021 23:20:24"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    CtrlLogic
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module CtrlLogic_vlg_sample_tst(
	CLK,
	Rst,
	sampler_tx
);
input  CLK;
input  Rst;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or Rst)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module CtrlLogic_vlg_check_tst (
	EN_A,
	EN_B,
	EN_C,
	EN_H,
	EN_L,
	SL_A,
	SL_B,
	SL_C,
	SL_H,
	SL_L,
	sampler_rx
);
input  EN_A;
input  EN_B;
input  EN_C;
input  EN_H;
input  EN_L;
input  SL_A;
input  SL_B;
input  SL_C;
input  SL_H;
input  SL_L;
input sampler_rx;

reg  EN_A_expected;
reg  EN_B_expected;
reg  EN_C_expected;
reg  EN_H_expected;
reg  EN_L_expected;
reg  SL_A_expected;
reg  SL_B_expected;
reg  SL_C_expected;
reg  SL_H_expected;
reg  SL_L_expected;

reg  EN_A_prev;
reg  EN_B_prev;
reg  EN_C_prev;
reg  EN_H_prev;
reg  EN_L_prev;
reg  SL_A_prev;
reg  SL_B_prev;
reg  SL_C_prev;
reg  SL_H_prev;
reg  SL_L_prev;

reg  EN_A_expected_prev;
reg  EN_B_expected_prev;
reg  EN_C_expected_prev;
reg  EN_H_expected_prev;
reg  EN_L_expected_prev;
reg  SL_A_expected_prev;
reg  SL_B_expected_prev;
reg  SL_C_expected_prev;
reg  SL_H_expected_prev;
reg  SL_L_expected_prev;

reg  last_EN_A_exp;
reg  last_EN_B_exp;
reg  last_EN_C_exp;
reg  last_EN_H_exp;
reg  last_EN_L_exp;
reg  last_SL_A_exp;
reg  last_SL_B_exp;
reg  last_SL_C_exp;
reg  last_SL_H_exp;
reg  last_SL_L_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:10] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 10'b1;
end

// update real /o prevs

always @(trigger)
begin
	EN_A_prev = EN_A;
	EN_B_prev = EN_B;
	EN_C_prev = EN_C;
	EN_H_prev = EN_H;
	EN_L_prev = EN_L;
	SL_A_prev = SL_A;
	SL_B_prev = SL_B;
	SL_C_prev = SL_C;
	SL_H_prev = SL_H;
	SL_L_prev = SL_L;
end

// update expected /o prevs

always @(trigger)
begin
	EN_A_expected_prev = EN_A_expected;
	EN_B_expected_prev = EN_B_expected;
	EN_C_expected_prev = EN_C_expected;
	EN_H_expected_prev = EN_H_expected;
	EN_L_expected_prev = EN_L_expected;
	SL_A_expected_prev = SL_A_expected;
	SL_B_expected_prev = SL_B_expected;
	SL_C_expected_prev = SL_C_expected;
	SL_H_expected_prev = SL_H_expected;
	SL_L_expected_prev = SL_L_expected;
end



// expected EN_A
initial
begin
	EN_A_expected = 1'bX;
end 

// expected SL_A
initial
begin
	SL_A_expected = 1'bX;
end 

// expected EN_B
initial
begin
	EN_B_expected = 1'bX;
end 

// expected SL_B
initial
begin
	SL_B_expected = 1'bX;
end 

// expected EN_C
initial
begin
	EN_C_expected = 1'bX;
end 

// expected SL_C
initial
begin
	SL_C_expected = 1'bX;
end 

// expected EN_H
initial
begin
	EN_H_expected = 1'bX;
end 

// expected SL_H
initial
begin
	SL_H_expected = 1'bX;
end 

// expected EN_L
initial
begin
	EN_L_expected = 1'bX;
end 

// expected SL_L
initial
begin
	SL_L_expected = 1'bX;
end 
// generate trigger
always @(EN_A_expected or EN_A or EN_B_expected or EN_B or EN_C_expected or EN_C or EN_H_expected or EN_H or EN_L_expected or EN_L or SL_A_expected or SL_A or SL_B_expected or SL_B or SL_C_expected or SL_C or SL_H_expected or SL_H or SL_L_expected or SL_L)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected EN_A = %b | expected EN_B = %b | expected EN_C = %b | expected EN_H = %b | expected EN_L = %b | expected SL_A = %b | expected SL_B = %b | expected SL_C = %b | expected SL_H = %b | expected SL_L = %b | ",EN_A_expected_prev,EN_B_expected_prev,EN_C_expected_prev,EN_H_expected_prev,EN_L_expected_prev,SL_A_expected_prev,SL_B_expected_prev,SL_C_expected_prev,SL_H_expected_prev,SL_L_expected_prev);
	$display("| real EN_A = %b | real EN_B = %b | real EN_C = %b | real EN_H = %b | real EN_L = %b | real SL_A = %b | real SL_B = %b | real SL_C = %b | real SL_H = %b | real SL_L = %b | ",EN_A_prev,EN_B_prev,EN_C_prev,EN_H_prev,EN_L_prev,SL_A_prev,SL_B_prev,SL_C_prev,SL_H_prev,SL_L_prev);
`endif
	if (
		( EN_A_expected_prev !== 1'bx ) && ( EN_A_prev !== EN_A_expected_prev )
		&& ((EN_A_expected_prev !== last_EN_A_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EN_A :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EN_A_expected_prev);
		$display ("     Real value = %b", EN_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_EN_A_exp = EN_A_expected_prev;
	end
	if (
		( EN_B_expected_prev !== 1'bx ) && ( EN_B_prev !== EN_B_expected_prev )
		&& ((EN_B_expected_prev !== last_EN_B_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EN_B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EN_B_expected_prev);
		$display ("     Real value = %b", EN_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_EN_B_exp = EN_B_expected_prev;
	end
	if (
		( EN_C_expected_prev !== 1'bx ) && ( EN_C_prev !== EN_C_expected_prev )
		&& ((EN_C_expected_prev !== last_EN_C_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EN_C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EN_C_expected_prev);
		$display ("     Real value = %b", EN_C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_EN_C_exp = EN_C_expected_prev;
	end
	if (
		( EN_H_expected_prev !== 1'bx ) && ( EN_H_prev !== EN_H_expected_prev )
		&& ((EN_H_expected_prev !== last_EN_H_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EN_H :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EN_H_expected_prev);
		$display ("     Real value = %b", EN_H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_EN_H_exp = EN_H_expected_prev;
	end
	if (
		( EN_L_expected_prev !== 1'bx ) && ( EN_L_prev !== EN_L_expected_prev )
		&& ((EN_L_expected_prev !== last_EN_L_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EN_L :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EN_L_expected_prev);
		$display ("     Real value = %b", EN_L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EN_L_exp = EN_L_expected_prev;
	end
	if (
		( SL_A_expected_prev !== 1'bx ) && ( SL_A_prev !== SL_A_expected_prev )
		&& ((SL_A_expected_prev !== last_SL_A_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SL_A :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SL_A_expected_prev);
		$display ("     Real value = %b", SL_A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_SL_A_exp = SL_A_expected_prev;
	end
	if (
		( SL_B_expected_prev !== 1'bx ) && ( SL_B_prev !== SL_B_expected_prev )
		&& ((SL_B_expected_prev !== last_SL_B_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SL_B :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SL_B_expected_prev);
		$display ("     Real value = %b", SL_B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_SL_B_exp = SL_B_expected_prev;
	end
	if (
		( SL_C_expected_prev !== 1'bx ) && ( SL_C_prev !== SL_C_expected_prev )
		&& ((SL_C_expected_prev !== last_SL_C_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SL_C :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SL_C_expected_prev);
		$display ("     Real value = %b", SL_C_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_SL_C_exp = SL_C_expected_prev;
	end
	if (
		( SL_H_expected_prev !== 1'bx ) && ( SL_H_prev !== SL_H_expected_prev )
		&& ((SL_H_expected_prev !== last_SL_H_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SL_H :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SL_H_expected_prev);
		$display ("     Real value = %b", SL_H_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_SL_H_exp = SL_H_expected_prev;
	end
	if (
		( SL_L_expected_prev !== 1'bx ) && ( SL_L_prev !== SL_L_expected_prev )
		&& ((SL_L_expected_prev !== last_SL_L_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SL_L :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SL_L_expected_prev);
		$display ("     Real value = %b", SL_L_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_SL_L_exp = SL_L_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module CtrlLogic_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg Rst;
// wires                                               
wire EN_A;
wire EN_B;
wire EN_C;
wire EN_H;
wire EN_L;
wire SL_A;
wire SL_B;
wire SL_C;
wire SL_H;
wire SL_L;

wire sampler;                             

// assign statements (if any)                          
CtrlLogic i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.EN_A(EN_A),
	.EN_B(EN_B),
	.EN_C(EN_C),
	.EN_H(EN_H),
	.EN_L(EN_L),
	.Rst(Rst),
	.SL_A(SL_A),
	.SL_B(SL_B),
	.SL_C(SL_C),
	.SL_H(SL_H),
	.SL_L(SL_L)
);

// CLK
initial
begin
	repeat(12)
	begin
		CLK = 1'b0;
		CLK = #40000 1'b1;
		# 40000;
	end
	CLK = 1'b0;
end 

// Rst
initial
begin
	Rst = 1'b0;
end 

CtrlLogic_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.Rst(Rst),
	.sampler_tx(sampler)
);

CtrlLogic_vlg_check_tst tb_out(
	.EN_A(EN_A),
	.EN_B(EN_B),
	.EN_C(EN_C),
	.EN_H(EN_H),
	.EN_L(EN_L),
	.SL_A(SL_A),
	.SL_B(SL_B),
	.SL_C(SL_C),
	.SL_H(SL_H),
	.SL_L(SL_L),
	.sampler_rx(sampler)
);
endmodule

